#ifndef SMALL_TEXT_H__
#define SMALL_TEXT_H__

//#include <ILI9341_t3n.h>

#define FONT_W 4
#define FONT_H 5

const uint8_t PROGMEM FONT_SMALL[]  = {
  // SPACE
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,

  // !
  0b00000100,
  0b00000100,
  0b00000100,
  0b00000000,
  0b00000100,

  // "
  0b00001010,
  0b00001010,
  0b00000000,
  0b00000000,
  0b00000000,

  // #
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,

  // $
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,

  // %
  0b00001010,
  0b00000010,
  0b00000100,
  0b00001000,
  0b00001010,

  // &
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,

  // '
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,

  // (
  0b00000010,
  0b00000100,
  0b00001000,
  0b00000100,
  0b00000010,

  // )
  0b00001000,
  0b00000100,
  0b00000010,
  0b00000100,
  0b00001000,

  // *
  0b00000000,
  0b00000100,
  0b00001110,
  0b00000100,
  0b00000000,

  // +
  0b00000000,
  0b00000100,
  0b00001110,
  0b00000100,
  0b00000000,

  // Â´
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,

  // -
  0b00000000,
  0b00000000,
  0b00001110,
  0b00000000,
  0b00000000,

  // .
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000100,

  // /
  0b00000010,
  0b00000010,
  0b00000100,
  0b00001000,
  0b00001000,

  // 0
  0b00000100,
  0b00001010,
  0b00001010,
  0b00001010,
  0b00000100,

  // 1
  0b000000100,
  0b000001100,
  0b000000100,
  0b000000100,
  0b000001110,

  // 2
  0b00001100,
  0b00000010,
  0b00000100,
  0b00001000,
  0b00001110,

  // 3
  0b00001100,
  0b00000010,
  0b00000100,
  0b00000010,
  0b00001100,

  // 4
  0b00001010,
  0b00001010,
  0b00001110,
  0b00000010,
  0b00000010,

  // 5
  0b00001110,
  0b00001000,
  0b00001110,
  0b00000010,
  0b00001100,

  // 6
  0b00001110,
  0b00001000,
  0b00001110,
  0b00001010,
  0b00001110,

  // 7
  0b00001110,
  0b00000010,
  0b00000100,
  0b00000100,
  0b00000100,

  // 8
  0b00001110,
  0b00001010,
  0b00001110,
  0b00001010,
  0b00001110,

  // 9
  0b00001110,
  0b00001010,
  0b00001110,
  0b00000010,
  0b00001100,

  // :
  0b00000000,
  0b00000100,
  0b00000000,
  0b00000100,
  0b00000000,

  // ;
  0b00000000,
  0b00000100,
  0b00000000,
  0b00000100,
  0b00000100,

  // <
  0b00000000,
  0b00000100,
  0b00001000,
  0b00000100,
  0b00000000,

  // =
  0b00000000,
  0b00001110,
  0b00000000,
  0b00001110,
  0b00000000,

  // >
  0b00000000,
  0b00000100,
  0b00000010,
  0b00000100,
  0b00000000,

  // ?
  0b00001110,
  0b00001010,
  0b00000100,
  0b00000000,
  0b00000100,

  // @
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,

  // A
  0b00000100,
  0b00001010,
  0b00001110,
  0b00001010,
  0b00001010,

  // B
  0b00001100,
  0b00001010,
  0b00001100,
  0b00001010,
  0b00001100,

  // C
  0b00000110,
  0b00001000,
  0b00001000,
  0b00001000,
  0b00000110,

  // D
  0b00001100,
  0b00001010,
  0b00001010,
  0b00001010,
  0b00001100,

  // E
  0b00001110,
  0b00001000,
  0b00001100,
  0b00001000,
  0b00001110,

  // F
  0b00001110,
  0b00001000,
  0b00001100,
  0b00001000,
  0b00001000,

  // G
  0b00001110,
  0b00001000,
  0b00001000,
  0b00001010,
  0b00001110,

  // H
  0b00001010,
  0b00001010,
  0b00001110,
  0b00001010,
  0b00001010,

  // I
  0b00001110,
  0b00000100,
  0b00000100,
  0b00000100,
  0b00001110,

  // J
  0b00000110,
  0b00000010,
  0b00000010,
  0b00001010,
  0b00000100,

  // K
  0b00001010,
  0b00001010,
  0b00001100,
  0b00001010,
  0b00001010,

  // L
  0b00001000,
  0b00001000,
  0b00001000,
  0b00001000,
  0b00001110,

  // M
  0b00001010,
  0b00001110,
  0b00001010,
  0b00001010,
  0b00001010,

  // N
  0b00001010,
  0b00001110,
  0b00001010,
  0b00001110,
  0b00001010,

  // O
  0b00001110,
  0b00001010,
  0b00001010,
  0b00001010,
  0b00001110,

  // P
  0b00001110,
  0b00001010,
  0b00001110,
  0b00001000,
  0b00001000,

  // Q
  0b00001110,
  0b00001010,
  0b00001010,
  0b00001010,
  0b00001100,

  // R
  0b00001100,
  0b00001010,
  0b00001100,
  0b00001010,
  0b00001010,

  // S
  0b00000110,
  0b00001000,
  0b00000100,
  0b00000010,
  0b00001100,

  // T
  0b00001110,
  0b00000100,
  0b00000100,
  0b00000100,
  0b00000100,

  // U
  0b00001010,
  0b00001010,
  0b00001010,
  0b00001010,
  0b00001110,

  // V
  0b00001010,
  0b00001010,
  0b00001010,
  0b00001010,
  0b00000100,

  // W
  0b00001010,
  0b00001010,
  0b00001010,
  0b00001110,
  0b00001010,

  // X
  0b00001010,
  0b00001010,
  0b00000100,
  0b00001010,
  0b00001010,

  // Y
  0b00001010,
  0b00001010,
  0b00000100,
  0b00000100,
  0b00000100,

  // Z
  0b00001110,
  0b00000010,
  0b00000100,
  0b00001000,
  0b00001110
};


class SmallText {
  public:

    SmallText();
    void init(ILI9341_t3n *tft, uint16_t x, uint16_t y, uint16_t ftColor = ILI9341_LIGHTGREY, uint16_t bgColor = ILI9341_BLACK);
    void printText(const char *text);
    void setFontColor(uint16_t ftColor);
  private:
    ILI9341_t3n        *_tft;
    uint16_t          _x;
    uint16_t          _y;
    uint16_t          _ox;
    uint16_t          _ix;
    uint16_t          _iy;
    uint16_t          _bgColor;
    uint16_t          _ftColor;
    void              write(uint8_t c);
    void              drawChar(uint8_t c);
};


SmallText::SmallText() {};

void SmallText::init(ILI9341_t3n *tft, uint16_t x, uint16_t y, uint16_t ftColor, uint16_t bgColor)
{
  _tft = tft;
  _x = x;
  _y = y;
  _bgColor = bgColor;
  _ftColor = ftColor;
}

void SmallText::printText(const char *text)
{
  if (text != NULL)
  {
    _ox = _x;
    _iy = _y;
    while (*text)
    {
      write(*text++);
      _ox += FONT_W;
      _iy = _y;
    }
  }
}

void SmallText::write(uint8_t c)
{
  if (c >= 97 && c <= 122) c -= 32;

  if (c >= 32 && c <= 90)
  {
    drawChar(c);
  }
}

void SmallText::drawChar(uint8_t c)
{
  uint16_t idx = (c - 32) * 5;
  uint8_t pixel;

  //Serial.print("Caracter ");
  //Serial.print(c);
  //Serial.print(" Indice=");
  //Serial.print(idx);
  //Serial.print(" 0b");

  for (uint16_t idr = 0; idr < FONT_H; idr++)
  {
    // Get row
    pixel = FONT_SMALL[idx + idr];
    pixel <<= 4;
    _ix = _ox;
    for (uint8_t i = 0; i < FONT_W; i++)
    {
      pixel & 0x80 ? _tft->drawPixel(_ix, _iy, _ftColor) : _tft->drawPixel(_ix, _iy, _bgColor);
      pixel <<= 1;
      _ix++;
    }
    _iy++;
    //Serial.println("");
  }

  //drawPixel(ix, iy, _ftColor)
}

void SmallText::setFontColor(uint16_t ftColor)
{
  _ftColor = ftColor;
}

#endif
